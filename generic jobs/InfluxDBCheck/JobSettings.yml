general:
  max degree of parallelism: 10                 # the maximum number of parallel threads to be used in the job. the default is 10. value between 2 and 100
  sequential processing: false                  # a flag to indicate if the checks should be processed sequentially or in parallel. the default is false
  stop running on fail: false                   # a flag to indicate if the job should stop running on fail in sequential processing. the default is false

defaults:                                       # default values for all keys. each key can override these values
  retry count: 3                                # the number of retry attemp in case of failure
  retry interval: 00:00:03                      # the interval between retry attemps
  maximum fails in row: 5                       # the maximum number of fails in row before the job is considered as failed

# server:                                        # the redis server parameters to be use. usualy this section defined in specific environment job settings
#   url: http://localhost:8086
#   token: null
#   organization: null

queries:
  - name: foo                                   # the key to be used in redis
    query: 'from(bucket: "example-bucket")
      |> range(start: -15m)
      |> filter(fn: (r) => r._measurement == "cpu" and r._field == "usage_system" and r.cpu == "cpu-total")
      |> last()'
    records condition: gt 10                    # condition for the number of records to be returned. you can use: eq <value>, ne <value>, gt <value>, ge <value>, lt <value>, le <value>, bi <value1> and <value2> (for between inclusive), be <value1> and <value2> (for between exclusive)
    value condition: be -1.5 and 2.8            # the maximum value of the first field of the first record to be returned. you can use: eq <value>, ne <value>, gt <value>, ge <value>, lt <value>, le <value>, bi <value1> and <value2> (for between inclusive), be <value1> and <value2> (for between exclusive)
    message: Latency of foo is too high         # the message to be logged in case of failure. you can use {{value}} to show value of query
    timeout: 00:00:10                           # the query execution timeout. the default is 30 seconds
    span: 00:05:00                              # the time span which violation on the key limit will be considered ok
    interval: 00:10:00                          # the interval between query executions. the default is null (run each trigger execution)
    active: true                                # the default is true