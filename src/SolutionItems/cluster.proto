syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto"; 
import "google/protobuf/timestamp.proto";


/* https://docs.microsoft.com/en-us/dotnet/architecture/grpc-for-wcf-developers/protobuf-data-types */

option csharp_namespace = "Planar";

package Cluster;

service PlanarCluster {
  rpc ConfigFlush (google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc HealthCheck (google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc StopScheduler (google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc StartScheduler (google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc GetRunningJobs (google.protobuf.Empty) returns (GetRunningJobsReply);
  rpc GetRunningJob (GetRunningJobRequest) returns (RunningJobReply);
  rpc IsJobRunning (RpcJobKey) returns (IsJobRunningReply);
  rpc GetRunningData (GetRunningJobRequest) returns (RunningDataReply);
  rpc IsRunningInstanceExist (GetRunningJobRequest) returns (IsRunningInstanceExistReply);
  rpc CancelRunningJob (GetRunningJobRequest) returns (CancelRunningJobReply);
  rpc GetPersistanceRunningJobInfo(google.protobuf.Empty) returns (PersistanceRunningJobInfoReply);
  rpc IsJobFolderExist(IsJobAssestsExistRequest) returns (IsJobAssestsExistReply);
  rpc IsJobFileExist(IsJobAssestsExistRequest) returns (IsJobAssestsExistReply);
  rpc ReloadMonitor(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message GetRunningJobRequest {
  string instanceId = 1;
}

message GetRunningJobsReply {
  repeated RunningJobReply jobs = 1;
}

message RpcJobKey{
	string group = 1;
	string name = 2;
}

message IsJobRunningReply{
	bool isRunning = 1;
}

message CancelRunningJobReply{
	bool isCanceled = 1;
}

message PersistanceRunningJobInfoReply
{
	repeated PersistanceRunningJobInfo runningJobs = 1;
}

message PersistanceRunningJobInfo
{
	string group = 1;
	string name = 2;
	string instanceId = 3;
	string log = 4;
	string exceptions = 5;
	int32 duration = 6;
}

message RunningJobReply{
	bool isEmpty = 1;
	string id = 2;
	string group = 3;
	string name = 4;
	string description = 5;
	string fireInstanceId = 6;
	optional google.protobuf.Timestamp scheduledFireTime = 7;
	google.protobuf.Timestamp fireTime = 8;
	optional google.protobuf.Timestamp nextFireTime = 9;
	optional google.protobuf.Timestamp previousFireTime = 10;
	google.protobuf.Duration runTime = 11;
	int32 refireCount = 12;
	string triggerName = 13;
	string triggerGroup = 14;
	string triggerId = 15;
	repeated DataMap DataMap = 16;
	optional int32 effectedRows = 17;
	int32 progress = 18;
	int32 exceptionsCount = 19;
	optional google.protobuf.Duration estimatedEndTime = 20;
	string jobType = 21;

}

message DataMap{
	string key = 1;
	string value = 2;
}

message RunningDataReply
{
	bool isEmpty = 1;
	string log = 2;
    string exceptions = 3;
	int32 exceptionsCount = 4;
}

message IsRunningInstanceExistReply
{
	bool exists = 1;
}

message IsJobAssestsExistReply
{
	bool exists = 1;
	string path = 2;
}


message IsJobAssestsExistRequest
{
	string folder = 1;
	string filename = 2;
}